from setuptools import setup, find_packages

setup(
    name="kf-d3m-primitives",
    version="2.0.0",
    description="All Kung Fu D3M primitives as a single library",
    packages=find_packages(),
    setkeywords=['d3m_primitive'],
    install_requires=[
        "numpy>=1.15.4,<=1.17.3", #"numpy==1.18.2",
        "pandas>=0.23.4,<=0.25.2", #"pandas==1.0.3",
        "scipy>=1.2.1,<=1.3.1", #"scipy==1.4.1",
        "scikit-learn[alldeps]>=0.20.3,<=0.21.3", #"scikit-learn==0.22.2.post1",
        "tslearn",
        "statsmodels",
        "pmdarima",
        "punk==3.0.0",
        "hdbscan",
        "requests",
        "shap",
        "tensorflow-gpu == 2.0.0", #"tensorflow-gpu == 2.1.0"
        "torch==1.4.0",
        "mxnet==1.6.0",
        "gluonts", #"gluonts @ git+https://github.com/awslabs/gluon-ts@master#egg=gluonts",
        "torchvision",
        "albumentations",
        "tifffile",
        "object_detection_retinanet @ git+https://github.com/uncharted-distil/object-detection-retinanet@beca7ff86faa2295408e46fe221a3c7437cfdc81#egg=object_detection_retinanet",
        "Simon @ git+https://github.com/uncharted-distil/simon@997a6a78a6bf920f05e68be6a052adf1348acce6#egg=Simon-1.2.4",
        "nk_sent2vec @ git+https://github.com/uncharted-distil/nk-sent2vec@85cdd7538c41ea8edf49d15ab749d258656eff00#egg=nk_sent2vec",
        "git+https://github.com/cfld/rs_pretrained@1191dd02d9916f17c0f24249cb2d762a91d1dee8#egg=rsp"
    ],
    entry_points={
        "d3m.primitives": [
            "data_cleaning.column_type_profiler.Simon = primitives.data_preprocessing.data_typing.simon:SimonPrimitive",
            "data_cleaning.geocoding.Goat_forward = primitives.data_preprocessing.geocoding_forward.goat_forward:GoatForwardPrimitive",
            "data_cleaning.geocoding.Goat_reverse = primitives.data_preprocessing.geocoding_reverse.goat_reverse:GoatReversePrimitive",
            "feature_extraction.nk_sent2vec.Sent2Vec = primitives.natural_language_processing.sent2vec.sent2vec:Sent2VecPrimitive",
            "clustering.k_means.Sloth = primitives.clustering.k_means.Storc:StorcPrimitive",
            "clustering.hdbscan.Hdbscan = primitives.clustering.hdbscan.Hdbscan:HdbscanPrimitive",
            "clustering.spectral_graph_clustering.SpectralClustering = primitives.clustering.spectral_clustering.SpectralClustering:SpectralClusteringPrimitive",
            "dimensionality_reduction.t_distributed_stochastic_neighbor_embedding.Tsne = primitives.dimensionality_reduction.tsne.Tsne:TsnePrimitive",
            "time_series_classification.k_neighbors.Kanine = primitives.ts_classification.knn.kanine:KaninePrimitive",
            "time_series_forecasting.vector_autoregression.VAR = primitives.ts_forecasting.vector_autoregression.var:VarPrimitive",
            "time_series_classification.convolutional_neural_net.LSTM_FCN = primitives.ts_classification.lstm_fcn.lstm_fcn:LstmFcnPrimitive",
            "time_series_forecasting.lstm.DeepAR = primitives.ts_forecasting.deep_ar.deepar:DeepArPrimitive",
            "object_detection.retinanet = primitives.object_detection.retinanet.object_detection_retinanet:ObjectDetectionRNPrimitive",
            "data_cleaning.data_cleaning.Datacleaning = primitives.data_preprocessing.data_cleaning.data_cleaning:DataCleaningPrimitive",
            "data_cleaning.text_summarization.Duke = primitives.data_preprocessing.duke.duke:DukePrimitive",
            "feature_selection.pca_features.Pcafeatures = primitives.feature_selection.pca_features.pca_features:PcaFeaturesPrimitive",
            "feature_selection.rffeatures.Rffeatures = primitives.feature_selection.rf_features.rf_features:RfFeaturesPrimitive"
            "classification.inceptionV3_image_feature.Gator = primitives.image_classification.imagenet_transfer_learning.gator:GatorPrimitive",
            "remote_sensing.remote_sensing_pretrained.RemoteSensingPretrained = primitives.remote_sensing.featurizer.remote_sensing_pretrained:RemoteSensingPretrainedPrimitive",
        ],
    },
)
